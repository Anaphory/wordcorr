#-----------------------------------------------------------------#
# SQL Queries to test the status of the database
#-----------------------------------------------------------------#

TEST_DATABASE=SELECT * FROM USERS

TEST_CURRENT_DATABASE=SELECT * FROM USERS

#-----------------------------------------------------------------#
# Primary SQL Queries
#-----------------------------------------------------------------#

GET_LAST_IDENTITY = CALL IDENTITY()

GET_USERS = SELECT USER_KEY, USER_NAME, FAMILY_NAME, GIVEN_NAME, EMAIL, AFFILIATIONS FROM USERS

org.wordcorr.db.User.CREATE = INSERT INTO USERS (USER_NAME, FAMILY_NAME, GIVEN_NAME, EMAIL, AFFILIATIONS) VALUES(?, ?, ?, ?, ?)

org.wordcorr.db.User.UPDATE = UPDATE USERS SET USER_NAME = ?, FAMILY_NAME = ?, GIVEN_NAME = ?, EMAIL = ?, AFFILIATIONS = ? WHERE USER_KEY = ?

org.wordcorr.db.User.RETRIEVE = SELECT USER_KEY, USER_NAME, FAMILY_NAME, GIVEN_NAME, EMAIL, AFFILIATIONS FROM USERS WHERE USER_KEY = ?

org.wordcorr.db.User.DELETE = DELETE FROM USERS WHERE USER_KEY = ?

GET_COLLECTIONS = SELECT COL_KEY, COL_NAME, COL_SHORTNAME, COL_CREATOR_ROLE, COL_CREATOR, COL_PUBLISHER, COL_CONTRIBUTOR, COL_DESCRIPTION, COL_REMARKS, GLOSS_LANG, GLOSS_LANG_CODE, GLOSS2_LANG, GLOSS2_LANG_CODE, KEYWORDS, COVERAGE, PUBLISHED_SOURCE, STABLE_LOCATION, RIGHTS_MANAGEMENT, RIGHTS_COPYRIGHT, EXPORT_TIMESTAMP FROM COLLECTION WHERE USER_KEY = ?

org.wordcorr.db.WordCollection.CREATE = INSERT INTO COLLECTION (COL_NAME, COL_SHORTNAME, COL_CREATOR_ROLE, COL_CREATOR, COL_PUBLISHER, COL_CONTRIBUTOR, COL_DESCRIPTION, COL_REMARKS, GLOSS_LANG, GLOSS_LANG_CODE, GLOSS2_LANG, GLOSS2_LANG_CODE, KEYWORDS, COVERAGE, PUBLISHED_SOURCE, STABLE_LOCATION, RIGHTS_MANAGEMENT, RIGHTS_COPYRIGHT, EXPORT_TIMESTAMP, USER_KEY) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

org.wordcorr.db.WordCollection.UPDATE = UPDATE COLLECTION SET COL_NAME = ?, COL_SHORTNAME = ?, COL_CREATOR_ROLE = ?, COL_CREATOR = ?, COL_PUBLISHER = ?, COL_CONTRIBUTOR = ?, COL_DESCRIPTION = ?, COL_REMARKS = ?, GLOSS_LANG = ?, GLOSS_LANG_CODE = ?, GLOSS2_LANG = ?, GLOSS2_LANG_CODE = ?, KEYWORDS = ?, COVERAGE = ?, PUBLISHED_SOURCE = ?, STABLE_LOCATION = ?, RIGHTS_MANAGEMENT = ?, RIGHTS_COPYRIGHT = ?, EXPORT_TIMESTAMP = ? WHERE COL_KEY = ?

org.wordcorr.db.WordCollection.RETRIEVE = SELECT COL_KEY, COL_NAME, COL_SHORTNAME, COL_CREATOR_ROLE, COL_CREATOR, COL_PUBLISHER, COL_CONTRIBUTOR, COL_DESCRIPTION, COL_REMARKS, GLOSS_LANG, GLOSS_LANG_CODE, GLOSS2_LANG, GLOSS2_LANG_CODE, KEYWORDS, COVERAGE, PUBLISHED_SOURCE, STABLE_LOCATION, RIGHTS_MANAGEMENT, RIGHTS_COPYRIGHT, EXPORT_TIMESTAMP FROM COLLECTION WHERE COL_KEY = ?

org.wordcorr.db.WordCollection.DELETE = DELETE FROM COLLECTION WHERE COL_KEY = ?

GET_SETTINGS = SELECT SETTING_KEY, SETTING_ID, USER_KEY, COLLECTION_KEY, VIEW_KEY, ENTRY_KEY, PROTO_KEY, CLUSTER_KEY FROM SETTING

org.wordcorr.db.Setting.CREATE = INSERT INTO SETTING (SETTING_ID) VALUES(?)

org.wordcorr.db.Setting.UPDATE = UPDATE SETTING SET SETTING_ID = ?, USER_KEY = ?, COLLECTION_KEY = ?, VIEW_KEY = ?, ENTRY_KEY = ? WHERE SETTING_KEY = ?

org.wordcorr.db.Setting.RETRIEVE = SELECT SETTING_KEY, SETTING_ID, USER_KEY, COLLECTION_KEY, VIEW_KEY, ENTRY_KEY, PROTO_KEY, CLUSTER_KEY FROM SETTING WHERE SETTING_KEY = ?

org.wordcorr.db.Setting.DELETE = DELETE FROM SETTING WHERE SETTING_KEY = ?

GET_VARIETIES = SELECT VARIETY_KEY, VARIETY_NAME, VARIETY_SHORTNAME, VARIETY_ABBR, VARIETY_NAME_ALT, VARIETY_REMARKS, ETH_CODE, CLASSIFICATION, QUALITY, LOCALE, SOURCE, SOURCE_UNPUB, COUNTRY FROM VARIETY WHERE COL_KEY = ?

org.wordcorr.db.Variety.CREATE = INSERT INTO VARIETY (VARIETY_NAME, VARIETY_SHORTNAME, VARIETY_ABBR, VARIETY_NAME_ALT, VARIETY_REMARKS, ETH_CODE, CLASSIFICATION, QUALITY, LOCALE, SOURCE, SOURCE_UNPUB, COUNTRY, COL_KEY) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

org.wordcorr.db.Variety.UPDATE = UPDATE VARIETY SET VARIETY_NAME = ?, VARIETY_SHORTNAME = ?, VARIETY_ABBR = ?, VARIETY_NAME_ALT = ?, VARIETY_REMARKS = ?, ETH_CODE = ?, CLASSIFICATION = ?, QUALITY = ?, LOCALE = ?, SOURCE = ?, SOURCE_UNPUB = ?, COUNTRY = ? WHERE VARIETY_KEY = ?

org.wordcorr.db.Variety.RETRIEVE = SELECT VARIETY_KEY, VARIETY_NAME, VARIETY_SHORTNAME, VARIETY_ABBR, VARIETY_NAME_ALT, VARIETY_REMARKS, ETH_CODE, CLASSIFICATION, QUALITY, LOCALE, SOURCE, SOURCE_UNPUB, COUNTRY FROM VARIETY WHERE VARIETY_KEY = ?

org.wordcorr.db.Variety.DELETE = DELETE FROM VARIETY WHERE VARIETY_KEY = ?

GET_VARIETIES_BY_VIEW = SELECT VARIETY_KEY, VARIETY_NAME, VARIETY_SHORTNAME, VARIETY_ABBR, VARIETY_NAME_ALT, VARIETY_REMARKS, ETH_CODE, CLASSIFICATION, QUALITY, LOCALE, SOURCE, SOURCE_UNPUB, COUNTRY FROM DATAVIEW_MEMBER, VARIETY WHERE DATAVIEW_MEMBER.VARIETY_KEY = VARIETY.VARIETY_KEY AND COL_KEY = ? AND DATAVIEW_MEMBER.VIEW_KEY = ? ORDER BY DATAVIEW_MEMBER.ORDER_NUM
GET_VARIETY_COUNT_NAME = SELECT COUNT (*) FROM VARIETY WHERE VARIETY_KEY <> ? AND VARIETY_NAME = ? AND COL_KEY = ?
GET_VARIETY_COUNT_SHORTNAME = SELECT COUNT (*) FROM VARIETY WHERE VARIETY_KEY <> ? AND VARIETY_SHORTNAME = ? AND COL_KEY = ?
GET_VARIETY_COUNT_ABBR = SELECT COUNT (*) FROM VARIETY WHERE VARIETY_KEY <> ? AND VARIETY_ABBR = ? AND COL_KEY = ?

GET_VIEWS = SELECT VIEW_KEY, VIEW_NAME, THRESHOLD, VIEW_REMARKS FROM DATAVIEW WHERE COL_KEY = ? AND USER_KEY = ?

org.wordcorr.db.View.CREATE = INSERT INTO DATAVIEW (VIEW_NAME, THRESHOLD, VIEW_REMARKS, COL_KEY, USER_KEY) VALUES (?, ?, ?, ?, ?)

org.wordcorr.db.View.UPDATE = UPDATE DATAVIEW SET VIEW_NAME = ?, THRESHOLD = ?, VIEW_REMARKS = ? WHERE VIEW_KEY = ?

org.wordcorr.db.View.RETRIEVE = SELECT VIEW_KEY, VIEW_NAME, THRESHOLD, VIEW_REMARKS FROM DATAVIEW WHERE VIEW_KEY = ?

org.wordcorr.db.View.DELETE = DELETE FROM DATAVIEW WHERE VIEW_KEY = ?

GET_VIEW_MEMBERS = SELECT VARIETY.VARIETY_KEY, VARIETY_NAME, VARIETY_SHORTNAME, VARIETY_ABBR, VARIETY_NAME_ALT, VARIETY_REMARKS, ETH_CODE, CLASSIFICATION, QUALITY, LOCALE, SOURCE, SOURCE_UNPUB, COUNTRY FROM DATAVIEW_MEMBER INNER JOIN VARIETY ON DATAVIEW_MEMBER.VARIETY_KEY = VARIETY.VARIETY_KEY WHERE VIEW_KEY = ? ORDER BY ORDER_NUM

REMOVE_VIEW_MEMBER = DELETE FROM DATAVIEW_MEMBER WHERE VIEW_KEY = ? AND VARIETY_KEY = ?

ADD_VIEW_MEMBER = INSERT INTO DATAVIEW_MEMBER (VIEW_KEY, VARIETY_KEY, ORDER_NUM) VALUES (?, ?, ?)

UPDATE_VIEW_MEMBER = UPDATE DATAVIEW_MEMBER SET ORDER_NUM = ? WHERE VIEW_KEY = ? AND VARIETY_KEY = ?

GET_ENTRIES = SELECT ENTRY_KEY, GLOSS, GLOSS2, ENTRY_NUM FROM ENTRY WHERE COL_KEY = ? ORDER BY ENTRY_NUM

GET_ENTRIES_FROM_ENTRY_NUM = SELECT ENTRY_KEY, GLOSS, GLOSS2, ENTRY_NUM FROM ENTRY WHERE COL_KEY = ? AND ENTRY_NUM >= ? ORDER BY ENTRY_NUM

org.wordcorr.db.Entry.CREATE = INSERT INTO ENTRY (GLOSS, GLOSS2, ENTRY_NUM, COL_KEY) VALUES(?, ?, ?, ?)

org.wordcorr.db.Entry.UPDATE = UPDATE ENTRY SET GLOSS = ?, GLOSS2 = ?, ENTRY_NUM = ? WHERE ENTRY_KEY = ?

org.wordcorr.db.Entry.RETRIEVE = SELECT ENTRY_KEY, GLOSS, GLOSS2, ENTRY_NUM FROM ENTRY WHERE ENTRY_KEY = ?

org.wordcorr.db.Entry.DELETE = DELETE FROM ENTRY WHERE ENTRY_KEY = ?

GET_DATA = SELECT DATUM.DATUM_KEY, RAW_DATUM, DATUM.VARIETY_KEY, SPECIAL_SEMANTICS, DATUM_REMARKS FROM DATAVIEW_MEMBER, DATUM, VARIETY WHERE DATAVIEW_MEMBER.VARIETY_KEY = VARIETY.VARIETY_KEY  AND VARIETY.VARIETY_KEY=DATUM.VARIETY_KEY  AND DATAVIEW_MEMBER.VIEW_KEY = ? AND DATUM.ENTRY_KEY = ? ORDER BY DATAVIEW_MEMBER.ORDER_NUM

org.wordcorr.db.Datum.CREATE = INSERT INTO DATUM (RAW_DATUM, VARIETY_KEY, SPECIAL_SEMANTICS, DATUM_REMARKS, ENTRY_KEY) VALUES(?, ?, ?, ?, ?)

org.wordcorr.db.Datum.UPDATE = UPDATE DATUM SET RAW_DATUM = ?, VARIETY_KEY = ?, SPECIAL_SEMANTICS = ?, DATUM_REMARKS = ? WHERE DATUM_KEY = ?

org.wordcorr.db.Datum.RETRIEVE = SELECT DATUM_KEY, RAW_DATUM, VARIETY_KEY, SPECIAL_SEMANTICS, DATUM_REMARKS FROM DATUM WHERE DATUM_KEY = ?

org.wordcorr.db.Datum.DELETE = DELETE FROM DATUM WHERE DATUM_KEY = ?

GET_ALIGNMENTS = SELECT ALIGNMENT.DATUM_KEY, ALIGNMENT_KEY, VECTOR, METATHESIS1, LENGTH1, METATHESIS2, LENGTH2, OBSERVATION, GROUP_KEY FROM ALIGNMENT, DATAVIEW_MEMBER, DATUM WHERE ALIGNMENT.VIEW_MEMBER_KEY = DATAVIEW_MEMBER.VIEW_MEMBER_KEY AND ALIGNMENT.DATUM_KEY = DATUM.DATUM_KEY AND DATAVIEW_MEMBER.VIEW_KEY = ? AND DATUM.ENTRY_KEY = ? ORDER BY DATAVIEW_MEMBER.ORDER_NUM

org.wordcorr.db.Alignment.CREATE = INSERT INTO ALIGNMENT (VECTOR, METATHESIS1, LENGTH1, METATHESIS2, LENGTH2, OBSERVATION, GROUP_KEY, DATUM_KEY, VIEW_MEMBER_KEY) VALUES (?, ?, ?, ?, ?, ?, ?, ?, SELECT VIEW_MEMBER_KEY FROM DATAVIEW_MEMBER WHERE VIEW_KEY = ? AND VARIETY_KEY = ?)

org.wordcorr.db.Alignment.UPDATE = UPDATE ALIGNMENT SET VECTOR = ?, METATHESIS1 = ?, LENGTH1 = ?, METATHESIS2 = ?, LENGTH2 = ?, OBSERVATION = ?, GROUP_KEY = ? WHERE ALIGNMENT_KEY = ?

org.wordcorr.db.Alignment.RETRIEVE = SELECT DATUM_KEY, ALIGNMENT_KEY, VECTOR, METATHESIS1, LENGTH1, METATHESIS2, LENGTH2, OBSERVATION, GROUP_KEY FROM ALIGNMENT WHERE ALIGNMENT_KEY = ?

org.wordcorr.db.Alignment.DELETE = DELETE FROM ALIGNMENT WHERE ALIGNMENT_KEY = ?

UPDATE_ALIGNMENT_VECTOR = UPDATE ALIGNMENT SET VECTOR = ? WHERE ALIGNMENT_KEY = ?

GET_GROUPS = SELECT GROUP_KEY, TAG, IS_DONE FROM FORM_GROUP WHERE VIEW_KEY = ? AND ENTRY_KEY = ?

org.wordcorr.db.Group.CREATE = INSERT INTO FORM_GROUP (TAG, IS_DONE, VIEW_KEY, ENTRY_KEY) VALUES (?, ?, ?, ?)

org.wordcorr.db.Group.UPDATE = UPDATE FORM_GROUP SET TAG = ?, RECONSTRUCTION = ?, FRANTZ_CLUSTER = ?, FRANTZ_PROTO = ?, ALL_CITATIONS_RES = ?, IS_DONE = ? WHERE GROUP_KEY = ?

org.wordcorr.db.Group.RETRIEVE = SELECT GROUP_KEY, TAG, IS_DONE FROM FORM_GROUP WHERE GROUP_KEY = ?

org.wordcorr.db.Group.DELETE = DELETE FROM FORM_GROUP WHERE GROUP_KEY = ?

GET_ZONES = SELECT ZONE_KEY, ZONE_ROW, ZONE_COL, ZONE_ABBR, ZONE_NAME, ZONE_TYPE FROM ZONE ORDER BY ZONE_ROW, ZONE_COL

GET_ZONE = SELECT ZONE_KEY, ZONE_ROW, ZONE_COL, ZONE_ABBR, ZONE_NAME, ZONE_TYPE FROM ZONE WHERE ZONE_ROW = ? AND ZONE_COL = ?

org.wordcorr.db.Zone.CREATE = INSERT INTO ZONE (ZONE_ROW, ZONE_COL, ZONE_ABBR, ZONE_NAME, ZONE_TYPE) VALUES (?, ?, ?, ?, ?)

org.wordcorr.db.Zone.UPDATE = UPDATE ZONE SET ZONE_ROW = ?, ZONE_COL = ?, ZONE_ABBR = ?, ZONE_NAME = ?, ZONE_TYPE = ? WHERE ZONE_KEY = ?

org.wordcorr.db.Zone.RETRIEVE = SELECT ZONE_KEY, ZONE_ROW, ZONE_COL, ZONE_ABBR, ZONE_NAME, ZONE_TYPE FROM ZONE WHERE ZONE_KEY = ?

org.wordcorr.db.Zone.DELETE = DELETE FROM ZONE WHERE ZONE_KEY = ?

GET_PROTOSEGMENTS = SELECT ZONE_KEY, PROTO_KEY, PROTOSEGMENT, PROTO_REMARKS FROM ZONE, PROTOSEGMENT WHERE ZONE.ZONE_KEY = PROTOSEGMENT.ZONE_KEY AND VIEW_KEY = ? ORDER BY ZONE.ZONE_ROW, ZONE.ZONE_COL, PROTOSEGMENT

GET_PROTOSEGMENT_COUNT = SELECT COUNT (*) FROM PROTOSEGMENT WHERE VIEW_KEY = ? AND ZONE_KEY = ? AND PROTOSEGMENT = ?

org.wordcorr.db.Protosegment.CREATE = INSERT INTO PROTOSEGMENT (PROTOSEGMENT, PROTO_REMARKS, VIEW_KEY, ZONE_KEY) VALUES (?, ?, ?, ?)

org.wordcorr.db.Protosegment.UPDATE = UPDATE PROTOSEGMENT SET PROTOSEGMENT = ?, PROTO_REMARKS = ?, ZONE_KEY = ? WHERE PROTO_KEY = ?

org.wordcorr.db.Protosegment.RETRIEVE = SELECT ZONE_KEY, PROTO_KEY, PROTOSEGMENT, PROTO_REMARKS FROM PROTOSEGMENT WHERE PROTO_KEY = ?

org.wordcorr.db.Protosegment.DELETE = DELETE FROM PROTOSEGMENT WHERE PROTO_KEY = ?

GET_CLUSTERS = SELECT CLUSTER_KEY, PROTO_KEY, ENVIRONMENT, CLUSTER_REMARKS, CLUSTER_ORDER FROM CLUSTER WHERE PROTO_KEY = ? ORDER BY CLUSTER_ORDER

GET_ENVIRONMENT_CLUSTERS = SELECT CLUSTER_KEY, PROTO_KEY, ENVIRONMENT, CLUSTER_REMARKS, CLUSTER_ORDER FROM CLUSTER WHERE PROTO_KEY = ? AND ENVIRONMENT = ?

GET_MAX_CLUSTER_ORDER = SELECT MAX(CLUSTER_ORDER) FROM CLUSTER WHERE PROTO_KEY = ?

org.wordcorr.db.Cluster.CREATE = INSERT INTO CLUSTER (ENVIRONMENT, CLUSTER_REMARKS, CLUSTER_ORDER, PROTO_KEY) VALUES (?, ?, ?, ?)

org.wordcorr.db.Cluster.UPDATE = UPDATE CLUSTER SET ENVIRONMENT = ?, CLUSTER_REMARKS = ?, CLUSTER_ORDER = ?, PROTO_KEY = ? WHERE CLUSTER_KEY = ?

org.wordcorr.db.Cluster.RETRIEVE = SELECT CLUSTER_KEY, PROTO_KEY, ENVIRONMENT, CLUSTER_REMARKS, CLUSTER_ORDER FROM CLUSTER WHERE CLUSTER_KEY = ?

org.wordcorr.db.Cluster.DELETE = DELETE FROM CLUSTER WHERE CLUSTER_KEY = ?

GET_CORRESPONDENCE_SETS = SELECT SET_KEY, CLUSTER_KEY, CORR_SET, VARIETY_COUNT, SET_REMARKS, SET_ORDER FROM CORRESPONDENCE_SET WHERE CLUSTER_KEY = ?

GET_MAX_CORRESPONDENCE_SET_ORDER = SELECT MAX(SET_ORDER) FROM CORRESPONDENCE_SET WHERE CLUSTER_KEY = ?

org.wordcorr.db.CorrespondenceSet.CREATE = INSERT INTO CORRESPONDENCE_SET (CORR_SET, VARIETY_COUNT, SET_REMARKS, SET_ORDER, CLUSTER_KEY) VALUES (?, ?, ?, ?, ?)

org.wordcorr.db.CorrespondenceSet.UPDATE = UPDATE CORRESPONDENCE_SET SET CORR_SET = ?, VARIETY_COUNT = ?, SET_REMARKS = ?, SET_ORDER = ?, CLUSTER_KEY = ? WHERE SET_KEY = ?

org.wordcorr.db.CorrespondenceSet.RETRIEVE = SELECT SET_KEY, CLUSTER_KEY, CORR_SET, VARIETY_COUNT, SET_REMARKS, SET_ORDER FROM CORRESPONDENCE_SET WHERE SET_KEY = ?

org.wordcorr.db.CorrespondenceSet.DELETE = DELETE FROM CORRESPONDENCE_SET WHERE SET_KEY = ?

GET_CITATIONS = SELECT CITATION_KEY, SET_KEY, GROUP_KEY, POSITION FROM CITATION WHERE SET_KEY = ? ORDER BY POSITION

GET_CITATIONS_BY_GROUP = SELECT CITATION_KEY, SET_KEY, GROUP_KEY, POSITION FROM CITATION WHERE GROUP_KEY = ? ORDER BY POSITION

org.wordcorr.db.Citation.CREATE = INSERT INTO CITATION (POSITION, SET_KEY, GROUP_KEY) VALUES (?, ?, ?)

org.wordcorr.db.Citation.UPDATE = UPDATE CITATION SET POSITION = ?, SET_KEY = ? WHERE CITATION_KEY = ?

org.wordcorr.db.Citation.RETRIEVE = SELECT CITATION_KEY, SET_KEY, GROUP_KEY, POSITION FROM CITATION WHERE CITATION_KEY = ?

org.wordcorr.db.Citation.DELETE = DELETE FROM CITATION WHERE CITATION_KEY = ?

GET_UNTABULATED_ENTRIES = SELECT ENTRY_KEY, GLOSS, GLOSS2, ENTRY_NUM FROM ENTRY,FORM_GROUP WHERE FORM_GROUP.ENTRY_KEY = ENTRY.ENTRY_KEY AND VIEW_KEY = ? AND IS_DONE = 0 GROUP BY ENTRY_KEY ORDER BY ENTRY_NUM

GET_ALIGNMENT_COUNT = SELECT COUNT(ALIGNMENT.ALIGNMENT_KEY) FROM DATAVIEW, FORM_GROUP, ALIGNMENT WHERE FORM_GROUP.GROUP_KEY = ALIGNMENT.GROUP_KEY AND DATAVIEW.VIEW_KEY = FORM_GROUP.VIEW_KEY AND DATAVIEW.VIEW_KEY=? AND FORM_GROUP.ENTRY_KEY=?

GET_THRESHOLD_GROUPS = SELECT GPKEY,GPTAG,GPDONE FROM (SELECT FORM_GROUP.GROUP_KEY AS GPKEY, FORM_GROUP.TAG AS GPTAG, FORM_GROUP.IS_DONE AS GPDONE, COUNT(ALIGNMENT.ALIGNMENT_KEY) AS ALIGNCOUNT FROM FORM_GROUP, ALIGNMENT WHERE FORM_GROUP.GROUP_KEY = ALIGNMENT.GROUP_KEY AND FORM_GROUP.VIEW_KEY=? AND FORM_GROUP.ENTRY_KEY=? GROUP BY GPKEY,GPTAG,GPDONE) WHERE ALIGNCOUNT>=? AND GPKEY<>NULL AND GPDONE=0 ORDER BY ALIGNCOUNT DESC

GET_BELOW_THRESHOLD_GROUPS = SELECT GPKEY,GPTAG,GPDONE FROM (SELECT FORM_GROUP.GROUP_KEY AS GPKEY, FORM_GROUP.TAG AS GPTAG, FORM_GROUP.IS_DONE AS GPDONE, COUNT(ALIGNMENT.ALIGNMENT_KEY) AS ALIGNCOUNT FROM FORM_GROUP, ALIGNMENT WHERE FORM_GROUP.GROUP_KEY = ALIGNMENT.GROUP_KEY AND FORM_GROUP.VIEW_KEY=? AND FORM_GROUP.ENTRY_KEY=? GROUP BY GPKEY,GPTAG,GPDONE) WHERE ALIGNCOUNT<? AND GPKEY<>NULL AND GPDONE=0 ORDER BY ALIGNCOUNT DESC

GET_TABULATED_GROUPS = SELECT ENTRY.ENTRY_KEY, GLOSS, GLOSS2, ENTRY_NUM, FORM_GROUP.GROUP_KEY, TAG, IS_DONE FROM DATAVIEW, FORM_GROUP, ENTRY WHERE DATAVIEW.VIEW_KEY = FORM_GROUP.VIEW_KEY AND FORM_GROUP.ENTRY_KEY = ENTRY.ENTRY_KEY AND IS_DONE = 1 AND DATAVIEW.VIEW_KEY = ? ORDER BY ENTRY_NUM, TAG

GET_TABULATED_THRESHOLD_GROUPS = SELECT ENTRY.ENTRY_KEY,  GLOSS, GLOSS2, ENTRY_NUM, FORM_GROUP.GROUP_KEY, TAG, IS_DONE FROM DATAVIEW, FORM_GROUP, ENTRY, CITATION WHERE DATAVIEW.VIEW_KEY = FORM_GROUP.VIEW_KEY AND FORM_GROUP.ENTRY_KEY = ENTRY.ENTRY_KEY AND FORM_GROUP.GROUP_KEY = CITATION.GROUP_KEY AND IS_DONE = 1 AND DATAVIEW.VIEW_KEY = ? GROUP BY FORM_GROUP.GROUP_KEY ORDER BY ENTRY_NUM, TAG

GET_FRANTZ_STRENGTH_GROUP_COUNT = SELECT COUNT(KEY) FROM (SELECT FORM_GROUP.GROUP_KEY AS KEY FROM DATAVIEW, FORM_GROUP, CITATION, CORRESPONDENCE_SET, CLUSTER, PROTOSEGMENT, ZONE WHERE DATAVIEW.VIEW_KEY = FORM_GROUP.VIEW_KEY AND FORM_GROUP.GROUP_KEY = CITATION.GROUP_KEY AND CITATION.SET_KEY = CORRESPONDENCE_SET.SET_KEY AND CORRESPONDENCE_SET.CLUSTER_KEY = CLUSTER.CLUSTER_KEY AND CLUSTER.PROTO_KEY = PROTOSEGMENT.PROTO_KEY AND PROTOSEGMENT.ZONE_KEY = ZONE.ZONE_KEY AND ZONE.ZONE_NAME <> 'RESIDUE' AND IS_DONE = 1 AND DATAVIEW.VIEW_KEY = ? GROUP BY FORM_GROUP.GROUP_KEY)

GET_GROUP_ALIGNMENTS = SELECT ALIGNMENT.DATUM_KEY, ALIGNMENT_KEY, VECTOR, METATHESIS1, LENGTH1, METATHESIS2, LENGTH2, OBSERVATION, GROUP_KEY FROM ALIGNMENT, DATAVIEW, DATAVIEW_MEMBER, DATUM, ENTRY WHERE ALIGNMENT.VIEW_MEMBER_KEY = DATAVIEW_MEMBER.VIEW_MEMBER_KEY AND DATAVIEW_MEMBER.VIEW_KEY = DATAVIEW.VIEW_KEY AND ALIGNMENT.DATUM_KEY = DATUM.DATUM_KEY AND DATUM.ENTRY_KEY = ENTRY.ENTRY_KEY AND DATAVIEW.VIEW_KEY = ? AND ENTRY.ENTRY_KEY = ? AND ALIGNMENT.GROUP_KEY = ?

GET_VIEW_GROUPS_TABULATED = SELECT COUNT(CLUSTER.CLUSTER_KEY) FROM DATAVIEW, PROTOSEGMENT, CLUSTER WHERE DATAVIEW.VIEW_KEY=PROTOSEGMENT.VIEW_KEY AND PROTOSEGMENT.PROTO_KEY=CLUSTER.PROTO_KEY AND DATAVIEW.VIEW_KEY=?

GET_GROUP_DONE_COUNT = SELECT COUNT(GROUP_KEY) FROM FORM_GROUP WHERE VIEW_KEY = ? AND ENTRY_KEY = ? AND IS_DONE = 1

DELETE_UNUSED_GROUPS = DELETE FROM FORM_GROUP WHERE GROUP_KEY IN (SELECT KEY FROM (SELECT FORM_GROUP.GROUP_KEY AS KEY, ALIGNMENT.GROUP_KEY AS ALIGNMENT_GROUP_KEY FROM FORM_GROUP  LEFT OUTER JOIN ALIGNMENT ON FORM_GROUP.GROUP_KEY = ALIGNMENT.GROUP_KEY WHERE VIEW_KEY = ? AND ENTRY_KEY = ?) WHERE ALIGNMENT_GROUP_KEY IS NULL)

DELETE_UNUSED_PROTOSEGMENTS = DELETE FROM PROTOSEGMENT WHERE PROTO_KEY IN (SELECT KEY, PROTOSEGMENT FROM (SELECT PROTOSEGMENT.PROTO_KEY AS KEY, CLUSTER.PROTO_KEY AS CLUSTER_PROTO_KEY, PROTOSEGMENT FROM PROTOSEGMENT LEFT OUTER JOIN CLUSTER ON PROTOSEGMENT.PROTO_KEY = CLUSTER.PROTO_KEY WHERE PROTOSEGMENT.VIEW_KEY = ?) WHERE CLUSTER_PROTO_KEY IS NULL)

GET_UNUSED_PROTOSEGMENTS = SELECT PROTOSEGMENT_ZONE_KEY, KEY, PROTOSEGMENT, PROTO_REMARKS FROM (SELECT PROTOSEGMENT.ZONE_KEY AS PROTOSEGMENT_ZONE_KEY, PROTOSEGMENT.PROTO_KEY AS KEY, CLUSTER.PROTO_KEY AS CLUSTER_PROTO_KEY, PROTOSEGMENT, PROTO_REMARKS FROM PROTOSEGMENT LEFT OUTER JOIN CLUSTER ON PROTOSEGMENT.PROTO_KEY = CLUSTER.PROTO_KEY WHERE PROTOSEGMENT.VIEW_KEY = ?), ZONE WHERE ZONE.ZONE_KEY = PROTOSEGMENT_ZONE_KEY AND CLUSTER_PROTO_KEY IS NULL ORDER BY ZONE.ZONE_ROW, ZONE.ZONE_COL, PROTOSEGMENT

GET_REFINE_TABLE = SELECT ZONE.ZONE_NAME, PROTOSEGMENT.PROTOSEGMENT, CLUSTER.ENVIRONMENT, CLUSTER.CLUSTER_ORDER, CORRESPONDENCE_SET.CORR_SET, ENTRY.ENTRY_NUM+FORM_GROUP.TAG+CITATION.POSITION AS CIT, PROTOSEGMENT.PROTO_REMARKS, CLUSTER.CLUSTER_REMARKS, CORRESPONDENCE_SET.SET_REMARKS, ZONE.ZONE_KEY+':'+PROTOSEGMENT.PROTO_KEY+':'+CLUSTER.CLUSTER_KEY+':'+CORRESPONDENCE_SET.SET_KEY+':'+CITATION.CITATION_KEY+':'+FORM_GROUP.GROUP_KEY+':'+ENTRY.ENTRY_KEY AS KEYS FROM ZONE, PROTOSEGMENT, CLUSTER, CORRESPONDENCE_SET, CITATION, FORM_GROUP, ENTRY WHERE ZONE.ZONE_KEY = PROTOSEGMENT.ZONE_KEY AND PROTOSEGMENT.PROTO_KEY = CLUSTER.PROTO_KEY AND CLUSTER.CLUSTER_KEY = CORRESPONDENCE_SET.CLUSTER_KEY AND CORRESPONDENCE_SET.SET_KEY = CITATION.SET_KEY AND CITATION.GROUP_KEY = FORM_GROUP.GROUP_KEY AND FORM_GROUP.ENTRY_KEY = ENTRY.ENTRY_KEY AND PROTOSEGMENT.VIEW_KEY=? ORDER BY ZONE.ZONE_ROW, ZONE.ZONE_COL, PROTOSEGMENT.PROTOSEGMENT, CLUSTER.CLUSTER_ORDER, CORRESPONDENCE_SET.VARIETY_COUNT DESC, CORR_SET, CIT

GET_REFINE_MERGE_CLUSTERS_ROW = SELECT PROTOSEGMENT, ENVIRONMENT, CLUSTER_ORDER, ZONE_KEY+':'+PROTO_KEY+':'+CLUSTER_KEY AS KEYS FROM ZONE, PROTOSEGMENT, CLUSTER WHERE ZONE.ZONE_KEY = PROTOSEGMENT.ZONE_KEY AND PROTOSEGMENT.PROTO_KEY = CLUSTER.PROTO_KEY AND VIEW_KEY = ? AND PROTOSEGMENT.PROTO_KEY = ? AND ENVIRONMENT = ? AND CLUSTER_KEY <> ? ORDER BY ZONE.ZONE_ROW, ZONE.ZONE_COL, PROTOSEGMENT, CLUSTER_ORDER

GET_REFINE_MERGE_PROTOSEGMENTS_ROW = SELECT ZONE_NAME, PROTOSEGMENT, ZONE_KEY+':'+PROTO_KEY AS KEYS FROM ZONE, PROTOSEGMENT WHERE ZONE.ZONE_KEY = PROTOSEGMENT.ZONE_KEY AND VIEW_KEY = ? AND PROTO_KEY <> ? ORDER BY ZONE.ZONE_ROW, ZONE.ZONE_COL, PROTOSEGMENT

GET_REFINE_MOVE_CLUSTER_ROW = SELECT ZONE_NAME, PROTOSEGMENT, ZONE_KEY+':'+PROTO_KEY AS KEYS FROM ZONE, PROTOSEGMENT WHERE ZONE.ZONE_KEY = PROTOSEGMENT.ZONE_KEY AND VIEW_KEY = ? AND PROTO_KEY <> ? ORDER BY ZONE.ZONE_ROW, ZONE.ZONE_COL, PROTOSEGMENT

GET_REFINE_MOVE_CORRESPONDENCE_SET_ROW = SELECT ZONE_NAME, PROTOSEGMENT, ZONE_KEY+':'+PROTO_KEY AS KEYS FROM ZONE, PROTOSEGMENT WHERE ZONE.ZONE_KEY = PROTOSEGMENT.ZONE_KEY AND VIEW_KEY = ? ORDER BY ZONE.ZONE_ROW, ZONE.ZONE_COL, PROTOSEGMENT

GET_REFINE_MOVE_CORRESPONDENCE_SET_TO_CLUSTER_ROW = SELECT PROTOSEGMENT, ENVIRONMENT, CLUSTER_ORDER, ZONE_KEY+':'+PROTO_KEY+':'+CLUSTER_KEY AS KEYS FROM ZONE, PROTOSEGMENT, CLUSTER WHERE ZONE.ZONE_KEY = PROTOSEGMENT.ZONE_KEY AND PROTOSEGMENT.PROTO_KEY = CLUSTER.PROTO_KEY AND PROTO_KEY = ? AND ENVIRONMENT = ? ORDER BY ZONE.ZONE_ROW, ZONE.ZONE_COL, PROTOSEGMENT, CLUSTER_ORDER

GET_REFINE_MOVE_PROTOSEGMENT_ROW = SELECT ZONE_ROW, ZONE_COL, ZONE_NAME, ZONE_KEY FROM ZONE EXCEPT SELECT ZONE_ROW, ZONE_COL, ZONE_NAME, ZONE_KEY FROM ZONE, PROTOSEGMENT WHERE ZONE.ZONE_KEY = PROTOSEGMENT.ZONE_KEY AND VIEW_KEY = ? AND PROTOSEGMENT = ?

GET_GROUP_DATA = SELECT TAG, ENTRY_NUM FROM FORM_GROUP, ENTRY WHERE FORM_GROUP.ENTRY_KEY = ENTRY.ENTRY_KEY AND GROUP_KEY = ? ORDER BY ENTRY_NUM, TAG

GET_GRAPHEME_CLUSTERS = SELECT VECTOR+':'+RAW_DATUM FROM DATAVIEW, DATAVIEW_MEMBER, ALIGNMENT, DATUM WHERE DATAVIEW.VIEW_KEY = DATAVIEW_MEMBER.VIEW_KEY AND DATAVIEW_MEMBER.VIEW_MEMBER_KEY = ALIGNMENT.VIEW_MEMBER_KEY AND ALIGNMENT.DATUM_KEY = DATUM.DATUM_KEY AND DATAVIEW.VIEW_KEY = ? AND VECTOR LIKE '%{%'

GET_UNDEFINE_GRAPHEME_CLUSTERS = SELECT VECTOR+':'+RAW_DATUM+':'+GROUP_KEY+':'+ALIGNMENT_KEY FROM DATAVIEW, DATAVIEW_MEMBER, ALIGNMENT, DATUM WHERE DATAVIEW.VIEW_KEY = DATAVIEW_MEMBER.VIEW_KEY AND DATAVIEW_MEMBER.VIEW_MEMBER_KEY = ALIGNMENT.VIEW_MEMBER_KEY AND ALIGNMENT.DATUM_KEY = DATUM.DATUM_KEY AND DATAVIEW.VIEW_KEY = ? AND VECTOR LIKE ?

GET_CLUSTER_CITATION_COUNT = SELECT COUNT(CITATION_KEY) FROM CLUSTER, CORRESPONDENCE_SET AS CSET, CITATION WHERE CLUSTER.CLUSTER_KEY = CSET.CLUSTER_KEY AND CSET.SET_KEY = CITATION.SET_KEY AND CLUSTER.CLUSTER_KEY = ?

GET_PROTOSEGMENT_CITATION_COUNT = SELECT COUNT(CITATION_KEY) FROM PROTOSEGMENT AS PROTO, CLUSTER, CORRESPONDENCE_SET AS CSET, CITATION WHERE PROTO.PROTO_KEY = CLUSTER.PROTO_KEY AND CLUSTER.CLUSTER_KEY = CSET.CLUSTER_KEY AND CSET.SET_KEY = CITATION.SET_KEY AND PROTO.PROTO_KEY = ?

GET_SUMMARY_CLUSTER_GROUPS_BY_FRANTZ_CLUSTER = SELECT ENTRY.ENTRY_KEY, GLOSS, GLOSS2, ENTRY_NUM, FORM_GROUP.GROUP_KEY, TAG, IS_DONE, RECONSTRUCTION, FRANTZ_CLUSTER, FRANTZ_PROTO, ALL_CITATIONS_RES FROM CORRESPONDENCE_SET, CITATION, FORM_GROUP,  ENTRY WHERE CORRESPONDENCE_SET.SET_KEY = CITATION.SET_KEY AND CITATION.GROUP_KEY = FORM_GROUP.GROUP_KEY AND FORM_GROUP.ENTRY_KEY = ENTRY.ENTRY_KEY AND CLUSTER_KEY = ? AND FORM_GROUP.FRANTZ_CLUSTER > ? GROUP BY GROUP_KEY ORDER BY VARIETY_COUNT DESC, FRANTZ_CLUSTER DESC

GET_SUMMARY_CLUSTER_GROUPS_BY_FRANTZ_PROTO = SELECT ENTRY.ENTRY_KEY, GLOSS, GLOSS2, ENTRY_NUM, FORM_GROUP.GROUP_KEY, TAG, IS_DONE, RECONSTRUCTION, FRANTZ_CLUSTER, FRANTZ_PROTO, ALL_CITATIONS_RES FROM CORRESPONDENCE_SET, CITATION, FORM_GROUP,  ENTRY WHERE CORRESPONDENCE_SET.SET_KEY = CITATION.SET_KEY AND CITATION.GROUP_KEY = FORM_GROUP.GROUP_KEY AND FORM_GROUP.ENTRY_KEY = ENTRY.ENTRY_KEY AND CLUSTER_KEY = ? AND FORM_GROUP.FRANTZ_PROTO > ? GROUP BY GROUP_KEY ORDER BY VARIETY_COUNT DESC, FRANTZ_PROTO DESC

GET_SUMMARY_DATUMS = SELECT DATUM.DATUM_KEY, RAW_DATUM, DATUM.VARIETY_KEY, SPECIAL_SEMANTICS, DATUM_REMARKS FROM DATAVIEW_MEMBER, DATUM, VARIETY, ALIGNMENT WHERE DATAVIEW_MEMBER.VARIETY_KEY = VARIETY.VARIETY_KEY AND VARIETY.VARIETY_KEY = DATUM.VARIETY_KEY AND DATUM.DATUM_KEY = ALIGNMENT.DATUM_KEY AND DATAVIEW_MEMBER.VIEW_KEY = ? AND ALIGNMENT.GROUP_KEY = ? AND DATUM.ENTRY_KEY = ? ORDER BY RAW_DATUM, DATAVIEW_MEMBER.ORDER_NUM

